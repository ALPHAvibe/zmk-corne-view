/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <275>;
    flavor = "balanced";
    quick-tap-ms = <275>;
    require-prior-idle-ms = <25>;
    hold-trigger-on-release;
};

&mt {
    hold-trigger-on-release;
    tapping-term-ms = <275>;
    quick-tap-ms = <275>;
    require-prior-idle-ms = <100>;
    flavor = "balanced";
};

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            quick-tap-ms = <275>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <275>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hnpt: hnpt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Nav Prev Tab";
            bindings = <&kp>, <&nav_prev_tab>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            quick-tap-ms = <275>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hnnt: hnnt {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Nav Next Tab";
            bindings = <&kp>, <&nav_next_tab>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            quick-tap-ms = <275>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hnb: hnb {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Nav Back";
            bindings = <&kp>, <&nav_back>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            quick-tap-ms = <275>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };
    };

    macros {
        hyper_h: open_h {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(H))))>;
            label = "OPEN_H";
        };

        hyper_j: open_j {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(J))))>;
            label = "OPEN_J";
        };

        hyper_k: open_k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(K))))>;
            label = "OPEN_K";
        };

        hyper_semicolon: open_semincolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(SEMICOLON))))>;
            label = "OPEN_SEMICOLON";
        };

        hyper_y: open_y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(Y))))>;
            label = "OPEN_Y";
        };

        hyper_u: open_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(U))))>;
            label = "OPEN_U";
        };

        hyper_i: open_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(I))))>;
            label = "OPEN_I";
        };

        hyper_o: open_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(O))))>;
            label = "OPEN_O";
        };

        hyper_p: open_p {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(P))))>;
            label = "OPEN_P";
        };

        hyper_l: open_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(L))))>;
            label = "OPEN_L";
        };

        hyper_f: mac_snap_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(F))))>;
            label = "MAC_SNAP_FULL";
        };

        hyper_s: mac_snap_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(S))))>;
            label = "MAC_SNAP_LEFT";
        };

        hyper_d: mac_snap_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(D))))>;
            label = "MAC_SNAP_RIGHT";
        };

        hyper_v: ipad_snap_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(V))))>;
            label = "IPAD_SNAP_FULL";
        };

        hyper_x: ipad_snap_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(X))))>;
            label = "IPAD_SNAP_LEFT";
        };

        hyper_c: iPad_snap_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(C))))>;
            label = "IPAD_SNAP_RIGHT";
        };

        hyper_7: tmux_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_7))))>;
            label = "TMUX_DOWN";
        };

        hyper_8: tmux_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_8))))>;
            label = "TMUX_UP";
        };

        hyper_6: tmux_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_6))))>;
            label = "TMUX_LEFT";
        };

        hyper_9: tmux_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_9))))>;
            label = "TMUX_RIGHT";
        };

        nav_back: nav_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(LEFT_BRACKET)))>;
            label = "NAV_BACK";
        };

        nav_forward: nav_forward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(RIGHT_BRACKET)))>;
            label = "NAV_FORWARD";
        };

        nav_prev_tab: nav_prev_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(LEFT_BRACKET)))>;
            label = "NAV_PREV_TAB";
        };

        nav_next_tab: nav_next_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(RIGHT_BRACKET)))>;
            label = "NAV_NEXT_TAB";
        };

        hyper_1: tmux_window_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_1))))>;
            label = "TMUX_WINDOW_1";
        };

        hyper_2: tmux_window_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_2))))>;
            label = "TMUX_WINDOW_2";
        };

        hyper_3: tmux_window_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_3))))>;
            label = "TMUX_WINDOW_3";
        };

        hyper_4: tmux_window_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_4))))>;
            label = "TMUX_WINDOW_4";
        };

        hyper_5: tmux_window_5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_5))))>;
            label = "TMUX_WINDOW_5";
        };

        hyper_0: macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(NUMBER_0))))>;
            label = "MACRO_0";
        };

        hyper_n: hyper_n {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(N))))>;
            label = "HYPER_N";
        };

        hyper_m: hyper_m {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(M))))>;
            label = "HYPER_M";
        };

        hyper_comma: hyper_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(COMMA))))>;
            label = "HYPER_COMMA";
        };

        hyper_period: hyper_period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(PERIOD))))>;
            label = "HYPER_PERIOD";
        };

        hyper_slash: hyper_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(LG(SLASH))))>;
            label = "HYPER_SLASH";
        };

        meh_z: hyper_f1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(Z)))>;
            label = "HYPER_F1";
        };

        meh_x: hyper_f2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(X)))>;
            label = "HYPER_F2";
        };

        meh_c: meh_c {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(C)))>;
            label = "MEH_C";
        };

        meh_v: meh_v {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(V)))>;
            label = "MEH_V";
        };

        meh_b: meh_b {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(B)))>;
            label = "MEH_B";
        };

        meh_slash: meh_slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(SLASH)))>;
            label = "MEH_SLASH";
        };
    };

    combos {
        compatible = "zmk,combos";

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <13 22>;
            require-prior-idle-ms = <150>;
            timeout-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB           &kp Q              &kp W                &kp E                     &kp R                &kp T           &kp Y        &kp U                 &kp I                          &kp O                 &kp P                 &kp BACKSLASH
&kp LEFT_CONTROL  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D           &hml LEFT_COMMAND F  &kp G           &kp H        &hmr RIGHT_COMMAND J  &hmr RIGHT_ALT K               &hmr RIGHT_CONTROL L  &hmr LEFT_SHIFT SEMI  &kp APOS
&kp LEFT_SHIFT    &lt 4 Z            &kp X                &kp C                     &kp V                &kp B           &kp N        &kp M                 &kp COMMA                      &kp DOT               &lt 5 SLASH           &kp RIGHT_SHIFT
                                                          &mt LS(LA(RCTRL)) ESCAPE  &lt 1 BACKSPACE      &lt 3 DELETE    &lt 3 ENTER  &lt 2 SPACE           &mt RS(RA(RC(RIGHT_GUI))) TAB
            >;

            label = "BASE";
        };

        numbers_left {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "NUM(L)";
        };

        numbers_right {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "NUM(R)";
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL   &kp AT          &kp HASH              &kp DOLLAR         &kp PERCENT    &kp CARET  &kp AMPS   &kp ASTRK              &kp LPAR          &kp RPAR       &none
&none  &kp GRAVE  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp SINGLE_QUOTE   &kp UNDER      &kp MINUS  &kp EQUAL  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp PIPE       &none
&none  &kp TILDE  &kp LESS_THAN   &kp LEFT_BRACKET      &kp DOUBLE_QUOTES  &none          &none      &kp PLUS   &kp RIGHT_BRACKET      &kp GREATER_THAN  &kp BACKSLASH  &none
                                  &trans                &trans             &trans         &trans     &trans     &trans
            >;

            label = "!@#$";
        };

        function_left {
            bindings = <
&none   &kp F1  &kp F2      &kp F3                &kp F4                &kp F5        &kp F6     &kp F7            &kp F8      &kp F9      &kp F10  &none
&none   &none   &kp C_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp F11       &kp F12    &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT  &none    &none
&trans  &trans  &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none      &none             &none       &none       &trans   &trans
                            &kp ESCAPE            &kp BACKSPACE         &kp DELETE    &kp ENTER  &kp SPACE         &kp TAB
            >;

            label = "FN(L)";
        };

        function_right {
            label = "FN(R)";
            bindings = <
&none   &kp F1  &kp F2      &kp F3                &kp F4                &kp F5        &kp F6     &kp F7            &kp F8      &kp F9      &kp F10  &none
&none   &none   &kp C_MUTE  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp F11       &kp F12    &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT  &none    &none
&trans  &trans  &none       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none      &none             &none       &none       &trans   &trans
                            &kp ESCAPE            &kp BACKSPACE         &kp DELETE    &kp ENTER  &kp SPACE         &kp TAB
            >;
        };

        function_conditional {
            label = "FN(C)";
            bindings = <
&none   &none   &none         &none       &none          &none         &none         &none         &none         &none         &none         &none
&none   &none   &none         &none       &none          &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&trans  &trans  &kp CAPSLOCK  &none       &none          &none         &none         &none         &none         &none         &trans        &trans
                              &kp ESCAPE  &kp BACKSPACE  &kp DELETE    &kp ENTER     &kp SPACE     &kp TAB
            >;
        };

        navigation {
            bindings = <
&none  &hyper_1        &hyper_2             &hyper_3          &hyper_4              &hyper_5        &hyper_6        &hyper_7        &hyper_8      &hyper_9         &hyper_0         &none
&none  &kp LEFT_SHIFT  &hnb LEFT_CONTROL 0  &hnpt LEFT_ALT 0  &hnnt LEFT_COMMAND 0  &nav_forward    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp RIGHT_SHIFT  &none
&none  &meh_z          &meh_x               &meh_c            &meh_v                &meh_b          &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &meh_slash       &none
                                            &trans            &trans                &trans          &trans          &trans          &trans
            >;

            label = "NAV";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Function {
            if-layers = <4 5>;
            then-layer = <6>;
        };

        Navigation {
            if-layers = <1 2>;
            then-layer = <7>;
        };
    };
};
