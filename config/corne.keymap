/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <275>;
    flavor = "balanced";
    quick-tap-ms = <275>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
};

&mt {
    hold-trigger-on-release;
    tapping-term-ms = <275>;
    quick-tap-ms = <275>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

/ {
    behaviors {
        hml: how_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            quick-tap-ms = <275>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <275>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <275>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    macros {
        spaces_left: spaces_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW)>;
            label = "SPACES_LEFT";
        };

        spaces_right: spaces_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT_ARROW)>;
            label = "SPACES_RIGHT";
        };

        spaces_up: spaces_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(UP_ARROW)>;
            label = "SPACES_UP";
        };

        spaces_down: spaces_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(DOWN_ARROW)>;
            label = "SPACES_DOWN";
        };

        personal_email: personal_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp P &kp H &kp A &kp V &kp I &kp B &kp E &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "PERSONAL_EMAIL";
        };

        nuon_email: nuon_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp O &kp B &kp AT &kp N &kp U &kp O &kp N &kp DOT &kp C &kp O>;
            label = "NUON_EMAIL";
        };

        open_h: open_h {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(H))))>;
            label = "OPEN_H";
        };

        open_j: open_j {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(J))))>;
            label = "OPEN_J";
        };

        open_k: open_k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(K))))>;
            label = "OPEN_K";
        };

        open_semicolon: open_semincolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(SEMICOLON))))>;
            label = "OPEN_SEMICOLON";
        };

        open_y: open_y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(Y))))>;
            label = "OPEN_Y";
        };

        open_u: open_u {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(U))))>;
            label = "OPEN_U";
        };

        open_i: open_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(I))))>;
            label = "OPEN_I";
        };

        open_o: open_o {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(O))))>;
            label = "OPEN_O";
        };

        open_p: open_p {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(P))))>;
            label = "OPEN_P";
        };

        open_l: open_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LC(LS(L))))>;
            label = "OPEN_L";
        };

        window_snap_full: window_snap_full {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(F)))>;
            label = "WINDOW_SNAP_FULL";
        };

        window_snap_left: window_snap_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(S)))>;
            label = "WINDOW_SNAP_LEFT";
        };

        window_snap_right: window_snap_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(LS(D)))>;
            label = "WINDOW_SNAP_RIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q              &kp W                &kp E            &kp R                &kp T           &kp Y        &kp U                 &kp I             &kp O                 &kp P                 &kp BACKSLASH
&kp ESCAPE  &hml LEFT_SHIFT A  &hml LEFT_CONTROL S  &hml LEFT_ALT D  &hml LEFT_COMMAND F  &lt 5 G         &lt 5 H      &hmr RIGHT_COMMAND J  &hmr RIGHT_ALT K  &hmr RIGHT_CONTROL L  &hmr LEFT_SHIFT SEMI  &kp SQT
&mo 4       &kp Z              &kp X                &kp C            &kp V                &kp B           &kp N        &kp M                 &kp COMMA         &kp DOT               &kp FSLH              &mo 4
                                                    &mo 6            &lt 1 BACKSPACE      &lt 3 DELETE    &lt 3 ENTER  &lt 2 SPACE           &mo 6
            >;
        };

        numbers_left {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4         &kp N5        &kp N6     &kp N7     &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans         &trans        &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans         &trans        &trans     &trans     &trans  &trans  &trans  &trans
                        &trans  &kp BACKSPACE  &kp DELETE    &kp ENTER  &kp SPACE  &trans
            >;
        };

        numbers_right {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4         &kp N5        &kp N6     &kp N7     &kp N8  &kp N9  &kp N0  &trans
&trans  &trans  &trans  &trans  &trans         &trans        &trans     &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans         &trans        &trans     &trans     &trans  &trans  &trans  &trans
                        &trans  &kp BACKSPACE  &kp DELETE    &kp ENTER  &kp SPACE  &trans
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR     &kp PERCENT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR       &trans
&trans  &trans    &trans  &trans    &trans         &trans         &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp PIPE       &kp GRAVE
&trans  &trans    &trans  &trans    &trans         &trans         &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp BACKSLASH  &kp TILDE
                          &trans    &kp BACKSPACE  &kp DELETE     &kp ENTER  &kp SPACE  &trans
            >;
        };

        function {
            bindings = <
&kp F1      &kp F2  &kp F3        &kp F4                &kp F5                &kp F6        &kp F7     &kp F8            &kp F9        &kp F10       &kp F11       &kp F12
&none       &none   &kp C_MUTE    &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &none         &none      &kp C_PLAY_PAUSE  &kp C_PREV    &kp C_NEXT    &none         &none
&bt BT_CLR  &none   &kp CAPSLOCK  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none         &none      &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
                                  &trans                &kp BACKSPACE         &kp DELETE    &kp ENTER  &kp SPACE         &trans
            >;
        };

        movement {
            bindings = <
&trans  &trans  &trans             &trans              &trans             &trans        &spaces_left    &spaces_down    &spaces_up    &spaces_right    &trans  &trans
&trans  &trans  &window_snap_left  &window_snap_right  &window_snap_full  &trans        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans             &trans              &trans             &trans        &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans  &trans
                                   &trans              &kp BACKSPACE      &kp DELETE    &kp ENTER       &kp SPACE       &trans
            >;
        };

        macros {
            bindings = <
&none        &none            &none  &trans  &none          &none         &open_y    &open_u    &open_i  &open_o  &open_p          &none
&none        &none            &none  &none   &none          &none         &open_h    &open_j    &open_k  &open_l  &open_semicolon  &none
&nuon_email  &personal_email  &none  &none   &none          &none         &none      &none      &none    &none    &none            &none
                                     &trans  &kp BACKSPACE  &kp DELETE    &kp ENTER  &kp SPACE  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
